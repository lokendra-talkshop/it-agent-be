AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaExecutionRole1:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
          -  arn:aws:iam::129875285541:policy/InfrabotAgentDevPolicy  
      Policies: 
        - PolicyName: "LambdaBasicExecutionCodeGenDev2"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - arn:aws:logs:us-east-2:129875285541:log-group:/aws/lambda/InfraBotCodeGenDev2:*

  LambdaExecutionRole2:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: [lambda.amazonaws.com]
              Action: sts:AssumeRole
        ManagedPolicyArns:
          -  arn:aws:iam::129875285541:policy/InfrabotAgentDevPolicy
        Policies: 
          - PolicyName: "LambdaBasicExecutionInfraBotDSLExecutionDev2"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:  
                    - arn:aws:logs:us-east-2:129875285541:log-group:/aws/lambda/InfraBotDSLExecutionDev2

  LambdaExecutionRole3:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: [lambda.amazonaws.com]
              Action: sts:AssumeRole
        ManagedPolicyArns:
          -  arn:aws:iam::129875285541:policy/InfrabotAgentDevPolicy
        Policies: 
          - PolicyName: "LambdaBasicExecutionInfraBotTerraformExecutionDev2"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:  
                    - arn:aws:logs:us-east-2:129875285541:log-group:/aws/lambda/InfraBotTerraformExecutionDev2



  Queue1:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: infrabot-codegen-agent-2-dev
            VisibilityTimeout: 1200
            MessageRetentionPeriod: 2400
        
        
  Queue2:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: infrabot-dsl-execution-agent-2-dev
            VisibilityTimeout: 1200
            MessageRetentionPeriod: 2400
  
  Queue3:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: infrabot-terraform-execution-agent-2-dev
            VisibilityTimeout: 1200
            MessageRetentionPeriod: 2400
  
  LambdaFunction1:
      Type: "AWS::Lambda::Function"
      Properties:
          Code:
              ImageUri: "129875285541.dkr.ecr.us-east-2.amazonaws.com/role-play-bot-ai-dev:lambda-chat-1.0.3"
          FunctionName: "InfraBotCodeGenDev2"
          Role: !GetAtt LambdaExecutionRole1.Arn
          PackageType: Image
          MemorySize: 256
          Timeout: 900
          Environment:
            Variables:
              OPENAI_API_KEY : ''


  LambdaFunction2:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ImageUri: "129875285541.dkr.ecr.us-east-2.amazonaws.com/role-play-bot-ai-dev:lambda-planner-1.0.0"
      FunctionName: "InfraBotDSLExecutionDev2"
      Role: !GetAtt LambdaExecutionRole2.Arn
      PackageType: Image
      MemorySize: 256
      Timeout: 900
      Environment:
            Variables:
              OPENAI_API_KEY : ''
  

  LambdaFunction3:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ImageUri: "129875285541.dkr.ecr.us-east-2.amazonaws.com/role-play-bot-ai-dev:lambda-planner-1.0.0"
      FunctionName: "InfraBotTerraformExecutionDev2"
      Role: !GetAtt LambdaExecutionRole2.Arn
      PackageType: Image
      MemorySize: 256
      Timeout: 900
      Environment:
            Variables:
              OPENAI_API_KEY : ''

  MyEventSourceMapping1:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt Queue1.Arn
      FunctionName: !GetAtt LambdaFunction1.Arn

  MyEventSourceMapping2:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt Queue2.Arn
      FunctionName: !GetAtt LambdaFunction2.Arn

  MyEventSourceMapping3:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt Queue3.Arn
      FunctionName: !GetAtt LambdaFunction3.Arn


  
