from langchain_core.tools import BaseTool
from agents.planning_agent import PlanningAgent
from agents.task_agent import TaskAgent
from pydantic import BaseModel, Field
from typing import Optional, Type, List
from talkshop_searchutils.generation.parser import JsonParser
import talkshop_searchutils.aws.util as aws
import json
import os
import boto3
import requests


class CodeExecutionInput(BaseModel):
    tool: str = Field(description="The name of the tool needed to execute the script")
    code: str = Field(description="The code to be executed")
    conversation_id: str = Field(default='default', description="The conversation ID")

class CodeRule(object):
    def __init__(self, condition, function , **kwargs):
       super().__init__()
       self.condition = condition 
       self.function = function 

    def apply(self, tool, code):
        if self.condition(tool, code):
            return self.function(tool, code)


class TerraformAWSProviderRemove(CodeRule):
    def __init__(self , **kwargs):
        condition = lambda tool, code : tool.lower() == 'terraform'
        super().__init__(condition, self.rule_function, **kwargs)

    def rule_function(self, tool, code):
        try:
            code_str_to_search = 'provider "aws"'
            aws_provider_index = code.index(code_str_to_search)
            position_of_start_bracket = aws_provider_index + len(code_str_to_search) + code[aws_provider_index + len(code_str_to_search):].index('{')
            parenthesis_block = ["{"]
            end_block_idx = 0
            for idx, ch in enumerate(code[position_of_start_bracket+1:]):
               if ch == '{':
                   parenthesis_block.append("{")
               if ch == "}": 
                   parenthesis_block.pop()
               if len(parenthesis_block) < 1:
                   end_block_idx = idx
                   break 
            code = code[position_of_start_bracket+end_block_idx+2:].strip()
            return code
        except ValueError:
            return code


class CodeExecutionAgentTool(BaseTool):
    name: str = "code_executor"
    description: str = "This is a tool for executing code that has been generated by a code generator. This should not be called if the code has not been confirmed."
    args_schema: Type[BaseModel] = CodeExecutionInput

    local_mode: bool = Field(exclude=True)

    def __init__(self, local_mode):
        super().__init__(local_mode=local_mode)

    def _run(
        self, tool: str, code: str, conversation_id: str = 'default', run_manager=None, **kwargs
    ) -> str:
        # if tool.lower() == 'dsl':
        #     print('dsl')
        #     from tools.interpreter import DSLInterpreter
        #     dslInterpreter = DSLInterpreter()
        #     outputs = dslInterpreter.interpret_code(code)
        #     return json.dumps(outputs)

        if tool:
            tool = tool.lower()
        if self.local_mode:
            return "Successfully Executed code"

        if run_manager is not None:
           metadata = run_manager.metadata
        rules = []
        if tool == "terraform":
            rules.append(TerraformAWSProviderRemove())
        dynamoClient = aws.get_client('dynamodb', region='us-east-2')
        try:
            result = dynamoClient.get_item(TableName=os.environ.get("execution_table",
                                                                  "InfrabotServiceAgentConfigurationDev"),
                                            Key={'service': { 'S': tool.lower() } })

            print(result)
            save_to_s3 = result.get('Item').get('save_to_s3').get('BOOL')
            # Apply code constraints and rules to the code in order to enforce constraints
            print("====OLD CODE====")
            print(code)
            for rule in rules:
                code = rule.apply(tool, code)
                print("Using rule and tool")
                print(rule)
                print(tool)
                print("====UPDATED CODE====")
                print(code)


            payload = {
                'tool': tool,
                'code': code
            }

            if save_to_s3:
                s3Client = aws.get_client('s3', region='us-east-2')
                import uuid
                fileId = uuid.uuid4()
                s3bucket = "infrabot-code-generation-dev"
                print("Conversation ID")
                print(conversation_id)
                key = "{0}/{1}".format(conversation_id, str(fileId))
                if tool == 'terraform':
                    filending = ".tf"
                else:
                    filenending = ""
                key = key + filending

                s3_file = "s3://{0}/{1}".format(s3bucket, key)
                print("Writing code to file")
                print(code)

                s3Client.put_object(Bucket=s3bucket, Key=key, Body=code)
                payload['code'] = s3_file

            data = {
                'agent': tool.lower(),
                'message': json.dumps(payload),
                'threadId': metadata.get('thread_id'),
                'runId': run_manager.run_id,
                'conversationId': metadata.get('conversationId'),
                'tool_call_id': metadata.get('tool_call_id'),
                'senderId': metadata.get('senderId')
            }
            print("Sending the payload")
            print(data)
            result = requests.post(
                metadata.get('agent_webhook'),
                headers={'Content-Type': 'application/json'},
                data=json.dumps(data)
            )
            if result.status_code == 200:
                return "Successfully sent the code to be executed."
            else:
                return "Could not send the code to be executed"

        except Exception as e:
            print(e)
            print("No service found for {0}".format(tool))
            return "No Service found for {0}".format(tool)
        return "Successfully sent the code for execution"

    async def _arun(
        self, query: str, run_manager=None
    ) -> str:
        """Use the tool asynchronously."""
        raise NotImplementedError("this does not support async")
    

if __name__ == "__main__":
        tool = CodeExecutionAgentTool()
        code = '''provider "aws" {
region = "us-east-2"
}
resource "aws_s3_bucket" "initial_bucket" {
bucket = "initial-bucket"
acl    = "private"
}'''
        t = 'terraform'

        tool._run(t, code, '1234')
